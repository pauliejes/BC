%{
#include<ctype.h>
#include<iostream>
#include<cstdio>
#include<cmath>
#include <cstdlib>
using namespace std;
//static int var[26];

#ifndef SYM_NODE
#define SYM_NODE
class Symbol_node {
	friend class Symbol_table;
	public:
		Symbol_node(void);
		~Symbol_node(void);
		//void putval(VALUE);
		void putval(int);
		//VALUE getval(void);
		int getval(void);
	private:
		char * id;
		//int token;
		//VALUE value;
		int val;
		Symbol_node * next;
};
#endif
typedef Symbol_node * Symbol_ptr;
#ifndef SYM_TABLE
#define SYM_TABLE
class Symbol_table {
	public:

		Symbol_table(void)
		{
			table = new Symbol_ptr[211];
		}
		~Symbol_table(void);
		//hash function
		int hash(const char * name) 
		{
			int hashVal = 0;
			hashVal += atoi(name);

			return hashVal % 211;
		}
		//insert something into the table
		Symbol_ptr insert (char * name) 
		{
			Symbol_ptr ptr;
			int hashVal = hash(name);

			return ptr;
		}
		//void remove(char *);
		Symbol_ptr lookup(char *);
		//void dump_table(void);
		//int table_size = 211;
	private:
		Symbol_ptr *table;
};
#endif

Symbol_table sym_table;

int yyparse(void);
int yylex(void);
void yyerror(const char *message);
%}


%union{
   int val;
   Symbol_ptr symbol_ptr;
}

%token<symbol_ptr> ID
//%token<var_pos> ID
%token<val> NUMBER
%token EQUAL PLUS MULT NEWLINE LPAREN RPAREN MINUS DIV MOD POW
%type <val> expr term factor stmt

%%
stmt_list	:	stmt NEWLINE
			|	stmt_list stmt NEWLINE
			;
stmt		:	ID EQUAL expr {sym_table.insert($1) = $3; cout << "=" << $3 << endl;}
			|	expr {cout << "=" << $1 << endl;}
			;
expr		:	expr PLUS term {$$ = $1 + $3;}
			|	expr MINUS term {$$ = $1 - $3;}
			|	term {$$ = $1;}
			;
term		:	term MULT factor {$$ = $1 * $3;}
			|	term DIV factor {$$ = $1 / $3;}
			|	term MOD factor {$$ = $1 % $3;}
			|	factor {$$ = $1;}
			|	MINUS factor {$$ = -$2;}
			;
factor 		:	LPAREN expr RPAREN {$$ = $2;}
			|	factor POW factor {$$ = pow($1,$3);}
			|	NUMBER	{$$ = $1;}
			|	ID {$$ = $1->getval()}//{$$ = $1;}
			;
%%
int main(void)
{
	yyparse();
	return 0;
}

void yyerror(const char *message)
{
	cout << message << endl;
}